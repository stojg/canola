{
  "version": 3,
  "sources": ["/Users/stojg/Sites/canola/src/lib/camera.ts"],
  "sourcesContent": ["import type REGL from 'regl'\nimport { glMatrix, mat4, quat, vec3 } from 'gl-matrix'\nimport { Transform } from './transform'\nimport type { FPSControls } from './controls'\n\ninterface CameraProps {\n  up?: REGL.Vec3\n  transform?: Transform\n  position?: vec3\n  rotation?: quat\n}\n\ninterface CameraState {\n  transform: Transform\n  yawChange: number\n  pitchChange: number\n  pointerLocked: boolean\n  up: vec3\n  projection: mat4\n  view: mat4\n}\n\nexport class Camera {\n  regl: REGL.Regl\n  props: CameraProps\n  controls: FPSControls\n\n  viewportWidth: number = 0\n  viewportHeight: number = 0\n\n  state: CameraState = {\n    transform: new Transform({}),\n    yawChange: 0,\n    pitchChange: 0,\n    pointerLocked: false,\n    up: [0, 1, 0],\n    projection: mat4.identity(new Float32Array(16)),\n    view: mat4.identity(new Float32Array(16)),\n  }\n\n  constructor(regl: REGL.Regl, controls: FPSControls, props: CameraProps) {\n    this.regl = regl\n    this.props = props\n    this.controls = controls\n    this.state.transform = this.props.transform || new Transform({ position: this.props.position, rotation: this.props.rotation })\n  }\n\n  get position(): vec3 {\n    return this.state.transform.position\n  }\n\n  look() {\n    const ptrSensitivity = 0.005\n    const ptr = this.controls.pointerMovement()\n    this.state.yawChange = lerp(this.state.yawChange, ptr[0] * ptrSensitivity, 0.5)\n    this.state.pitchChange = lerp(this.state.pitchChange, ptr[1] * ptrSensitivity, 0.5)\n    this.state.transform.rotateXY(-this.state.yawChange, -this.state.pitchChange)\n  }\n\n  move() {\n    let move = vec3.create()\n    let tmp = vec3.create()\n    if (this.controls.keyPressed('w')) {\n      vec3.transformQuat(tmp, [0, 0, -1], this.state.transform.rotation)\n      vec3.add(move, move, tmp)\n    }\n    if (this.controls.keyPressed('s')) {\n      vec3.transformQuat(tmp, [0, 0, 1], this.state.transform.rotation)\n      vec3.add(move, move, tmp)\n    }\n    if (this.controls.keyPressed('a')) {\n      vec3.transformQuat(tmp, [-1, 0, 0], this.state.transform.rotation)\n      vec3.add(move, move, tmp)\n    }\n    if (this.controls.keyPressed('d')) {\n      vec3.transformQuat(tmp, [1, 0, 0], this.state.transform.rotation)\n      vec3.add(move, move, tmp)\n    }\n    const sensitivity = 0.1\n    vec3.scale(move, move, sensitivity)\n    this.state.transform.addPosition(move)\n  }\n\n  view() {\n    // conjugate rotation because the world should appear to rotate opposite to the camera's rotation.\n    const rotation: quat = quat.create()\n    mat4.getRotation(rotation, this.state.transform.transformation)\n    quat.conjugate(rotation, rotation)\n    // similar, the translation is inverted because the world appears to move opposite to the camera's movement.\n    const translation = vec3.create()\n    mat4.getTranslation(translation, this.state.transform.transformation)\n    vec3.negate(translation, translation)\n    // convert from whatever it is back into mat4\n    const cameraRotation = mat4.create()\n    mat4.fromQuat(cameraRotation, rotation)\n    const cameraTranslation = mat4.create()\n    mat4.fromTranslation(cameraTranslation, translation)\n    // now we can set the view\n    mat4.multiply(this.state.view, cameraRotation, cameraTranslation)\n  }\n\n  update() {\n    this.look()\n    this.move()\n    this.state.transform.update()\n    this.view()\n  }\n\n  regenProjection(x: number, y: number): boolean {\n    return x != this.viewportWidth || y != this.viewportHeight\n  }\n\n  projection(viewportWidth: number, viewportHeight: number): mat4 {\n    if (!this.regenProjection(viewportWidth, viewportHeight)) {\n      return this.state.projection\n    }\n    this.viewportWidth = viewportWidth\n    this.viewportHeight = viewportHeight\n    return mat4.perspective(this.state.projection, glMatrix.toRadian(80), viewportWidth / viewportHeight, 0.01, 1000.0)\n  }\n\n  config(): REGL.DrawConfig {\n    return {\n      context: {\n        projection: (ctx: REGL.DefaultContext) => this.projection(ctx.viewportWidth, ctx.viewportHeight),\n      },\n      uniforms: {\n        // @ts-ignore\n        projection: this.regl.context('projection'),\n        view: () => this.state.view,\n        camPos: () => this.position,\n      },\n    }\n  }\n\n  draw() {\n    const config = this.config()\n    const injectContext = this.regl(config)\n    return (block: any) => {\n      injectContext(block)\n    }\n  }\n}\n\nfunction lerp(a: number, b: number, amount: number): number {\n  return a * (1 - amount) + b * amount\n}\n"],
  "mappings": "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",
  "names": []
}
