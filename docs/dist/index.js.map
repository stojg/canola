{
  "version": 3,
  "sources": ["/Users/stojg/Sites/canola/src/index.ts"],
  "sourcesContent": ["import REGL from 'regl'\nimport resl from 'resl'\nimport { createCamera } from './lib/camera'\nimport bunny from 'bunny'\nimport plane from './models/plane'\nimport type { vec3 } from 'gl-matrix'\nimport { FPSControls } from './lib/controls'\nimport { cube } from './models/cube'\nimport { createStatsWidget } from './ui/stats-widget'\nimport { Model } from './lib/model'\nimport { debugLogger } from './lib/shame'\nimport { halfFloatTextureExt, queryTimerExt, textureFloatExt } from './lib/cap'\nimport { SpinController } from './lib/controller'\nimport { Mesh } from './lib/mesh'\nimport { InstancedMesh } from './lib/instanced_mesh'\nimport { DirectionalLight, Lights, PointLight } from './lib/light'\nimport { xyz } from './lib/swizzle'\n\n// https://emscripten.org/docs/optimizing/Optimizing-WebGL.html\ndebugLogger()\n\nconst seed = (s: number) => () => {\n  s = Math.sin(s) * 10000\n  return s - Math.floor(s)\n}\nconst rand = seed(1815)\n\nlet toLoad = {\n  // Each entry in the manifest represents an asset to be loaded\n  'main.fsh': { type: 'text', src: 'shaders/main.fsh' },\n  'main.vsh': { type: 'text', src: 'shaders/main.vsh' },\n  'emissive.fsh': { type: 'text', src: 'shaders/emissive.fsh' },\n  'pbr.fsh': { type: 'text', src: 'shaders/pbr.fsh' },\n  'pbr_shadow.fsh': { type: 'text', src: 'shaders/pbr_shadow.fsh' },\n  'pbr_shadow.vsh': { type: 'text', src: 'shaders/pbr_shadow.vsh' },\n  'light_cube.fsh': { type: 'text', src: 'shaders/light_cube.fsh' },\n  'light_cube.vsh': { type: 'text', src: 'shaders/light_cube.vsh' },\n  'shadow_dir.vsh': { type: 'text', src: 'shaders/shadow_dir.vsh' },\n  'shadow_dir.fsh': { type: 'text', src: 'shaders/shadow_dir.fsh' },\n}\n\ntoLoad = Object.assign(toLoad)\n\nconst loading = {\n  manifest: toLoad,\n  onProgress: (progress: number, message: any) => {},\n  onError: (err: Error) => {\n    console.debug(err)\n    console.error(err)\n  },\n  onDone: (assets: Record<string, string>) => {\n    main(assets)\n  },\n}\n\nconst main = (assets: Record<string, string>) => {\n  const regl = init()\n\n  const cubeMesh = new Mesh(cube.positions, cube.indices, cube.normals)\n  const planeMesh = new Mesh(plane.positions, plane.indices, plane.normals)\n  const bunnyMesh = new Mesh(bunny.positions, bunny.cells)\n\n  const controls = new FPSControls(regl._gl.canvas as HTMLCanvasElement)\n  const camera = createCamera(regl, controls, { position: [0, 3, 10] })\n\n  const lights = new Lights()\n  lights.push(new DirectionalLight(regl, 6.0, [1.0, 1.0, 0.5], [-1, 1, 1]))\n  lights.push(new PointLight(regl, 300.0, [1, 1, 0.8], [-3, 2, -3], 10))\n  lights.push(new PointLight(regl, 300.0, [1, 0, 0], [3, 2, 3], 10))\n  lights.push(new PointLight(regl, 0.0, [0, 1, 0], [-3, 2, 3], 10))\n  lights.push(new PointLight(regl, 0.0, [0, 0, 1], [3, 2, -3], 10))\n\n  let mainConfig: REGL.DrawConfig = {\n    vert: assets['pbr_shadow.vsh'],\n    frag: assets['pbr_shadow.fsh'],\n    cull: { enable: true, face: 'back' as REGL.FaceOrientationType },\n    uniforms: { ao: 0.001 },\n  }\n\n  const pointShadowConf = {\n    frag: assets['light_cube.fsh'],\n    vert: assets['light_cube.vsh'],\n    cull: { enable: true, face: 'back' as REGL.FaceOrientationType },\n  }\n  const pLightShadowDraws: REGL.DrawCommand[] = []\n  lights.pointLightSetup(pLightShadowDraws, mainConfig, pointShadowConf)\n\n  const dirShadowConf = {\n    frag: assets['shadow_dir.fsh'],\n    vert: assets['shadow_dir.vsh'],\n    cull: { enable: true, face: 'back' as REGL.FaceOrientationType },\n    uniforms: { ao: 0.001 },\n  }\n  const dirLightShadows: REGL.DrawCommand[] = []\n  lights.dirLightSetup(dirLightShadows, mainConfig, dirShadowConf)\n\n  const mainDraw = regl(mainConfig)\n\n  const ctrl = SpinController\n  const up: vec3 = [0, 1, 0]\n  const scale = 0.2\n  const y = 0.0\n  const bunnyProps = []\n\n  const N = 3\n  for (let x = 0; x < N; x++) {\n    for (let z = 0; z < N; z++) {\n      const pos: vec3 = [x * (20 / N) - 6.6, y, z * (20 / N) - 6.6]\n      bunnyProps.push(\n        new Model(\n          {\n            albedo: [rand(), rand(), rand()],\n            metallic: rand(),\n            roughness: rand(),\n          },\n          pos,\n          scale,\n          -43,\n          up,\n          new ctrl(),\n        ),\n      )\n    }\n  }\n\n  const bunnies = new InstancedMesh(regl, bunnyMesh, bunnyProps)\n  const bunnyDraw = regl(bunnies.config({}))\n  const planeProps = [new Model({ albedo: [0.3, 0.3, 0.3], metallic: 0.1, roughness: 0.9 }, [0, 0, 0], 20)]\n  const planes = new InstancedMesh(regl, planeMesh, planeProps)\n  const planeDraw = regl(planes.config({}))\n\n  const lightProps: Model[] = []\n  lights.forEach((light, i) => {\n    if (light.on && light instanceof PointLight) {\n      lightProps.push(new Model({ albedo: light.color, metallic: 0, roughness: 0.025 }, xyz(light.position), 0.05))\n    }\n  })\n\n  const lightsI = new InstancedMesh(regl, cubeMesh, lightProps)\n  const lightBulbDraw = regl(lightsI.config({}))\n  const lightScope = regl(lights.config())\n\n  const emissiveDraw = regl({\n    frag: assets['emissive.fsh'],\n    vert: assets['main.vsh'],\n    cull: { enable: true, face: 'back' },\n  })\n\n  const drawCalls: [REGL.DrawCommand, string][] = []\n  pLightShadowDraws.forEach((n, i) => {\n    drawCalls.push([n, `drawDepth${i}`])\n  })\n  drawCalls.push([mainDraw, 'main'])\n  drawCalls.push([emissiveDraw, 'emissive'])\n  const statsWidget = createStatsWidget(drawCalls, regl)\n\n  let prevTime = 0.0\n  regl.frame(({ time }) => {\n    const deltaTime = time - prevTime\n    prevTime = time\n    statsWidget.update(deltaTime)\n\n    bunnies.update()\n\n    pLightShadowDraws.forEach((cmd) => {\n      cmd(6, () => {\n        regl.clear({ depth: 1 })\n        bunnyDraw()\n        planeDraw()\n      })\n    })\n\n    regl.clear({ color: [0.06, 0.06, 0.06, 255], depth: 1 })\n    camera(() => {\n      lightScope(() => {\n        mainDraw(() => {\n          bunnyDraw()\n          planeDraw()\n        })\n      })\n      emissiveDraw(() => {\n        lightBulbDraw()\n      })\n    })\n  })\n}\n\nconst init = function (): REGL.Regl {\n  const requestExtensions: string[] = []\n  if (queryTimerExt()) {\n    requestExtensions.push('EXT_disjoint_timer_query')\n  }\n  if (halfFloatTextureExt()) {\n    requestExtensions.push(halfFloatTextureExt())\n  }\n  if (textureFloatExt()) {\n    requestExtensions.push(textureFloatExt())\n  }\n  requestExtensions.push('oes_vertex_array_object')\n  requestExtensions.push('ANGLE_instanced_arrays')\n  return REGL({\n    extensions: requestExtensions,\n    optionalExtensions: ['oes_texture_float_linear'],\n    profile: true,\n    attributes: { antialias: true },\n  })\n}\n\nresl(loading)\n"],
  "mappings": "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",
  "names": []
}
