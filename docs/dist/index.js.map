{
  "version": 3,
  "sources": ["/Users/stojg/Sites/canola/src/index.ts"],
  "sourcesContent": ["import REGL from 'regl'\nimport resl from 'resl'\nimport { createCamera } from './lib/camera'\nimport bunny from 'bunny'\nimport plane from './models/plane'\nimport { glMatrix, mat4, vec3, vec4 } from 'gl-matrix'\nimport { FPSControls } from './lib/controls'\nimport { cube } from './models/cube'\nimport { createStatsWidget } from './ui/stats-widget'\nimport { Model, ModelUniforms } from './lib/model'\nimport { Lights } from './lib/lights'\nimport { debugLogger } from './lib/shame'\nimport { halfFloatTextureExt, queryTimerExt, textureFloatExt } from './lib/cap'\nimport { SpinController } from './lib/controller'\nimport { Mesh } from './lib/mesh'\nimport { InstancedMesh } from './lib/instanced_mesh'\n\ndebugLogger()\n\nconst seed = (s: number) => () => {\n  s = Math.sin(s) * 10000\n  return s - Math.floor(s)\n}\nconst rand = seed(1815)\n\nconst loading = {\n  manifest: {\n    // Each entry in the manifest represents an asset to be loaded\n    'main.fsh': { type: 'text', src: 'shaders/main.fsh' },\n    'main.vsh': { type: 'text', src: 'shaders/main.vsh' },\n    'emissive.fsh': { type: 'text', src: 'shaders/emissive.fsh' },\n    'pbr.fsh': { type: 'text', src: 'shaders/pbr.fsh' },\n    'pbr_shadow.fsh': { type: 'text', src: 'shaders/pbr_shadow.fsh' },\n    'pbr_shadow.vsh': { type: 'text', src: 'shaders/pbr_shadow.vsh' },\n    'light_cube.fsh': { type: 'text', src: 'shaders/light_cube.fsh' },\n    'light_cube.vsh': { type: 'text', src: 'shaders/light_cube.vsh' },\n  },\n  onProgress: (progress: number, message: any) => {},\n  onError: (err: Error) => {\n    console.debug(err)\n    console.error(err)\n  },\n  onDone: (assets: Record<string, string>) => {\n    main(assets)\n  },\n}\n\ninterface MeshAttributes {\n  position: vec3[]\n  normal: vec3[]\n  modelA: any\n  modelB: any\n  modelC: any\n  modelD: any\n}\n\nconst main = (assets: Record<string, string>) => {\n  const regl = init()\n\n  const cubeMesh = new Mesh(cube.positions, cube.indices, cube.normals)\n  const planeMesh = new Mesh(plane.positions, plane.indices, plane.normals)\n  const bunnyMesh = new Mesh(bunny.positions, bunny.cells)\n\n  const controls = new FPSControls(regl._gl.canvas as HTMLCanvasElement)\n  const camera = createCamera(regl, controls, { position: [0, 3, 10] })\n\n  const lights = new Lights()\n  lights.add(true, [1, 1, 1], [-3, 3, -3, 1], 5)\n  lights.add(true, [1, 0, 0], [3, 3, 3, 1], 5)\n  lights.add(false, [0, 1, 0], [-3, 3, 3, 1], 2)\n  lights.add(false, [0, 0, 1], [3, 3, -3, 1], 4)\n\n  const lightProps: any = []\n  lights.all().forEach((light, i) => {\n    if (!light.on) return\n    const mtrl = { albedo: light.color, metallic: 0, roughness: 0.025, ao: 1.0 }\n    lightProps.push(new Model(mtrl, xyz(light.pos), 0.05))\n  })\n\n  function lightCubeDraw(lightId: number): REGL.DrawConfig {\n    const shadowFbo = lights.shadowFBO(regl, lightId)\n    const proj = mat4.perspective(mat4.create(), glMatrix.toRadian(90), 1, 0.5, 15.0)\n    return {\n      frag: assets['light_cube.fsh'],\n      vert: assets['light_cube.vsh'],\n      cull: { enable: true, face: 'back' },\n      uniforms: {\n        projectionView: (context: REGL.DefaultContext, props: any, batchId: number) => {\n          switch (batchId) {\n            case 0: // +x right\n              return mat4.mul(mat4.create(), proj, mat4.lookAt(mat4.create(), xyz(lights.get(lightId).pos), vec3.add(vec3.create(), vec3.fromValues(1, 0, 0), xyz(lights.get(lightId).pos)), [0, -1, 0]))\n            case 1: // -x left\n              return mat4.mul(mat4.create(), proj, mat4.lookAt(mat4.create(), xyz(lights.get(lightId).pos), vec3.add(vec3.create(), vec3.fromValues(-1, 0, 0), xyz(lights.get(lightId).pos)), [0, -1, 0]))\n            case 2: // +y top\n              return mat4.mul(mat4.create(), proj, mat4.lookAt(mat4.create(), xyz(lights.get(lightId).pos), vec3.add(vec3.create(), vec3.fromValues(0, 1, 0), xyz(lights.get(lightId).pos)), [0, 0, 1]))\n            case 3: // -y bottom\n              return mat4.mul(mat4.create(), proj, mat4.lookAt(mat4.create(), xyz(lights.get(lightId).pos), vec3.add(vec3.create(), vec3.fromValues(0, -1, 0), xyz(lights.get(lightId).pos)), [0, 0, -1]))\n            case 4: // +z near\n              return mat4.mul(mat4.create(), proj, mat4.lookAt(mat4.create(), xyz(lights.get(lightId).pos), vec3.add(vec3.create(), vec3.fromValues(0, 0, 1), xyz(lights.get(lightId).pos)), [0, -1, 0]))\n            case 5: // -z far\n              return mat4.mul(mat4.create(), proj, mat4.lookAt(mat4.create(), xyz(lights.get(lightId).pos), vec3.add(vec3.create(), vec3.fromValues(0, 0, -1), xyz(lights.get(lightId).pos)), [0, -1, 0]))\n          }\n        },\n      },\n      framebuffer: function (context, props, batchId) {\n        return shadowFbo.faces[batchId]\n      },\n    }\n  }\n\n  // render point-light shadows into a cubemap\n  const drawDepth = [regl(lightCubeDraw(0)), regl(lightCubeDraw(1)), regl(lightCubeDraw(2)), regl(lightCubeDraw(3))]\n  const oneLightScope = [regl(lights.lightUniform(regl, 0)), regl(lights.lightUniform(regl, 1)), regl(lights.lightUniform(regl, 2)), regl(lights.lightUniform(regl, 3))]\n\n  const shadowDraw = regl({\n    frag: assets['pbr_shadow.fsh'],\n    vert: assets['pbr_shadow.vsh'],\n    cull: { enable: true, face: 'back' },\n    uniforms: {\n      'shadowCubes[0]': lights.shadowFBO(regl, 0),\n      'shadowCubes[1]': lights.shadowFBO(regl, 1),\n      'shadowCubes[2]': lights.shadowFBO(regl, 2),\n      'shadowCubes[3]': lights.shadowFBO(regl, 3),\n      ao: 0.001,\n    },\n  })\n\n  const ctrl = SpinController\n  const up: vec3 = [0, 1, 0]\n  const scale = 0.2\n  const y = 0.0\n  const bunnyProps = [\n    // new Model({ albedo: [0.55, 0.55, 0.6], metallic: 0.25, roughness: 0.82 }, [0, y, 0], scale, 45, up, new ctrl()),\n    // new Model({ albedo: [0.69, 0.27, 0.2], metallic: 0.2, roughness: 0.75 }, [4, y, 4], scale, -45, up, new ctrl()),\n    // new Model({ albedo: [0.0, 0.5, 0.0], metallic: 0.0, roughness: 0.025 }, [-4, y, 4], scale, 90, up, new ctrl()),\n    // new Model({ albedo: [0.0, 0.5, 0.9], metallic: 5, roughness: 0.025 }, [-2, y, 4], scale, 35, up, new ctrl()),\n    // new Model({ albedo: [0.5, 0.5, 0.5], metallic: 0.5, roughness: 0.025 }, [-6, y, -6], scale, 70, up, new ctrl()),\n    // new Model({ albedo: [0.5, 0.5, 0.5], metallic: 0.5, roughness: 0.025 }, [4, y, -6], scale, 35, up, new ctrl()),\n    // new Model({ albedo: [1, 1, 1], metallic: 0.75, roughness: 0.125 }, [2, y, 2], scale, 35, up, new ctrl()),\n    // new Model({ albedo: [0.5, 0.5, 0.5], metallic: 5, roughness: 0.025 }, [1, y, -4], scale, -70, up, new ctrl()),\n  ]\n\n  const N = 5\n  for (let x = 0; x < N; x++) {\n    for (let z = 0; z < N; z++) {\n      const pos: vec3 = [x * (20 / N) - 8.5, y, z * (20 / N) - 7.5]\n      bunnyProps.push(new Model({ albedo: [rand(), rand(), rand()], metallic: rand(), roughness: rand() }, pos, scale, -43, up, new ctrl()))\n    }\n  }\n\n  const bunnies = new InstancedMesh(regl, bunnyMesh, bunnyProps)\n  const bunnyDraw = regl(bunnies.config({}))\n\n  const planeProps = [new Model({ albedo: [0.3, 0.3, 0.3], metallic: 0.1, roughness: 0.9 }, [0, 0, 0], 20)]\n\n  const planes = new InstancedMesh(regl, planeMesh, planeProps)\n  const planeDraw = regl(planes.config({}))\n\n  const lightsI = new InstancedMesh(regl, cubeMesh, lightProps)\n  const lightBulbDraw = regl(lightsI.config({}))\n\n  const allLightScope = regl(lights.allUniforms(regl))\n\n  const emissiveDraw = regl({\n    frag: assets['emissive.fsh'],\n    vert: assets['main.vsh'],\n    cull: { enable: true, face: 'back' },\n  })\n\n  const drawCalls: [REGL.DrawCommand, string][] = []\n  lights.lights.forEach((l, i) => {\n    if (l.on) drawCalls.push([drawDepth[i], `lightmap${i}`])\n  })\n  drawCalls.push([shadowDraw, 'shadowed'])\n  drawCalls.push([emissiveDraw, 'emissive'])\n  const statsWidget = createStatsWidget(drawCalls, regl)\n\n  let prevTime = 0.0\n  regl.frame(({ time }) => {\n    const deltaTime = time - prevTime\n    prevTime = time\n    statsWidget.update(deltaTime)\n\n    bunnies.update()\n\n    for (let i = 0; i < lights.all().length; i++) {\n      if (!lights.get(i).on) {\n        continue\n      }\n      oneLightScope[i](() => {\n        drawDepth[i](6, () => {\n          regl.clear({ depth: 1 })\n          bunnyDraw()\n          planeDraw()\n        })\n      })\n    }\n\n    regl.clear({ color: [0.06, 0.06, 0.06, 255], depth: 1 })\n    camera(() => {\n      allLightScope(() => {\n        shadowDraw(() => {\n          bunnyDraw()\n          planeDraw()\n        })\n      })\n      emissiveDraw(() => {\n        lightBulbDraw()\n      })\n    })\n  })\n}\n\nconst xyz = (t: vec4) => vec3.fromValues(t[0], t[1], t[2])\n\nconst init = function (): REGL.Regl {\n  const requestExtensions: string[] = []\n  if (queryTimerExt()) {\n    requestExtensions.push('EXT_disjoint_timer_query')\n  }\n  if (halfFloatTextureExt()) {\n    requestExtensions.push(halfFloatTextureExt())\n  }\n  if (textureFloatExt()) {\n    requestExtensions.push(textureFloatExt())\n  }\n\n  requestExtensions.push('oes_vertex_array_object')\n\n  requestExtensions.push('ANGLE_instanced_arrays')\n\n  return REGL({\n    extensions: requestExtensions,\n    optionalExtensions: ['oes_texture_float_linear'],\n    profile: true,\n    attributes: { antialias: true },\n  })\n}\n\nresl(loading)\n"],
  "mappings": "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",
  "names": []
}
