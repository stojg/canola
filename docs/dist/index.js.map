{
  "version": 3,
  "sources": ["/Users/stojg/Sites/canola/src/index.ts"],
  "sourcesContent": ["import REGL from 'regl'\nimport resl from 'resl'\nimport { createCamera } from './lib/camera'\nimport bunny from 'bunny'\nimport plane from './models/plane'\nimport normals from 'angle-normals'\nimport { vec3, vec4 } from 'gl-matrix'\nimport { FPSControls } from './lib/controls'\nimport { cube } from './models/cube'\nimport createStatsWidget from 'regl-stats-widget'\nimport { Model, ModelUniforms } from './lib/model'\n\ninterface Assets extends Record<string, string> {}\n\nconst loading = {\n  manifest: {\n    // Each entry in the manifest represents an asset to be loaded\n    'main.fsh': {\n      type: 'text', // the type declares the type of the asset\n      src: 'shaders/main.fsh', // and src declares the URL of the asset\n    },\n    'main.vsh': {\n      type: 'text', // the type declares the type of the asset\n      src: 'shaders/main.vsh', // and src declares the URL of the asset\n    },\n    'pbr.fsh': {\n      type: 'text', // the type declares the type of the asset\n      src: 'shaders/pbr.fsh', // and src declares the URL of the asset\n    },\n  },\n  onProgress: (progress: any, message: any) => {\n    console.log(progress, message)\n  },\n  onError: (err: Error) => {\n    console.error(err)\n  },\n  onDone: (assets: Assets) => {\n    main(assets)\n  },\n}\n\ninterface MeshAttributes {\n  position: vec3[]\n  normal: vec3[]\n}\n\nresl(loading)\n\nconst main = (assets: Assets) => {\n  const regl = REGL({\n    extensions: 'ext_disjoint_timer_query',\n    profile: true,\n    attributes: { antialias: true },\n  })\n\n  const controls = new FPSControls(regl._gl.canvas as HTMLCanvasElement)\n  const camera = createCamera(regl, controls, { position: [0, 1.5, 10] })\n\n  interface LightUniforms {\n    'lights[0].on': boolean\n    'lights[0].color': vec3\n    'lights[0].position': vec4\n    'lights[1].on': boolean\n    'lights[1].color': vec3\n    'lights[1].position': vec4\n    'lights[2].on': boolean\n    'lights[2].color': vec3\n    'lights[2].position': vec4\n    'lights[3].on': boolean\n    'lights[3].color': vec3\n    'lights[3].position': vec4\n  }\n\n  const lights = [\n    { on: true, color: vec3.fromValues(100, 100, 100), pos: vec4.fromValues(-3, 3, -3, 1) },\n    { on: true, color: vec3.fromValues(100, 0, 0), pos: vec4.fromValues(3, 3, 3, 1) },\n    { on: true, color: vec3.fromValues(0, 100, 0), pos: vec4.fromValues(-3, 3, 3, 1) },\n    { on: true, color: vec3.fromValues(0, 0, 100), pos: vec4.fromValues(3, 3, -3, 1) },\n  ]\n  const lightProps: any = []\n  for (const i in lights) {\n    if (!lights[i].on) continue\n    lightProps.push(new Model({ albedo: lights[i].color, metallic: 0, roughness: 0.025, ao: 1.0 }, [lights[i].pos[0], lights[i].pos[1], lights[i].pos[2]], 0.05))\n  }\n\n  const mainScope = regl({\n    cull: { enable: true, face: 'back' },\n  })\n\n  const lightScope = regl<LightUniforms>({\n    uniforms: {\n      'lights[0].on': lights[0].on,\n      'lights[0].color': lights[0].color,\n      'lights[0].position': lights[0].pos,\n      'lights[1].on': lights[1].on,\n      'lights[1].color': lights[1].color,\n      'lights[1].position': lights[1].pos,\n      'lights[2].on': lights[2].on,\n      'lights[2].color': lights[2].color,\n      'lights[2].position': lights[2].pos,\n      'lights[3].on': lights[3].on,\n      'lights[3].color': lights[3].color,\n      'lights[3].position': lights[3].pos,\n    },\n  })\n\n  const bunnyProps = [\n    new Model({ albedo: [0.55, 0.55, 0.6], metallic: 0.25, roughness: 0.82, ao: 0.05 }, [0, 0, 0], 0.2, 45),\n    new Model({ albedo: [0.69, 0.27, 0.2], metallic: 0.2, roughness: 0.75, ao: 0.05 }, [4, 0, 4], 0.2, -45),\n    new Model({ albedo: [0.0, 0.5, 0.0], metallic: 0.0, roughness: 0.025, ao: 0.05 }, [-4, 0, 4], 0.2, 90),\n    new Model({ albedo: [0.0, 0.5, 0.9], metallic: 5, roughness: 0.025, ao: 0.05 }, [-2, 0, 4], 0.2, 35),\n    new Model({ albedo: [0.5, 0.5, 0.5], metallic: 5, roughness: 0.025, ao: 0.05 }, [-6, 0, -6], 0.2, 70),\n    new Model({ albedo: [0.5, 0.5, 0.5], metallic: 5, roughness: 0.025, ao: 0.05 }, [4, 0, -6], 0.2, 35),\n    new Model({ albedo: [0.5, 0.5, 0.5], metallic: 5, roughness: 0.025, ao: 0.05 }, [6, 0, -5], 0.2, -43),\n    new Model({ albedo: [0.5, 0.5, 0.5], metallic: 5, roughness: 0.025, ao: 0.05 }, [1, 0, -4], 0.2, -70),\n  ]\n\n  const planeProps = [\n    new Model(\n      {\n        albedo: [0.42, 0.4, 0.38],\n        metallic: 0.69,\n        roughness: 0.08,\n        ao: 0.0,\n      },\n      [0, 0, 0],\n      20,\n      90,\n      [1, 0, 0],\n    ),\n  ]\n\n  const planeDraw = regl<ModelUniforms, MeshAttributes>({\n    frag: assets['pbr.fsh'],\n    vert: assets['main.vsh'],\n    elements: plane.indices,\n    cull: { enable: true, face: 'back' },\n    attributes: { position: plane.positions, normal: plane.normals },\n    uniforms: Model.uniforms(regl),\n  })\n\n  const bunnyDraw = regl<ModelUniforms, MeshAttributes>({\n    frag: assets['pbr.fsh'],\n    vert: assets['main.vsh'],\n    elements: bunny.cells,\n    attributes: { position: bunny.positions, normal: normals(bunny.cells, bunny.positions) },\n    uniforms: Model.uniforms(regl),\n  })\n\n  const lightDraw = regl<ModelUniforms, MeshAttributes>({\n    frag: assets['main.fsh'],\n    vert: assets['main.vsh'],\n    elements: cube.indices,\n    attributes: { position: cube.positions, normal: cube.normals },\n    uniforms: Model.uniforms(regl),\n  })\n\n  const statsWidget = createStatsWidget([\n    [planeDraw, 'plane'],\n    [bunnyDraw, 'bunnies'],\n    [lightDraw, 'lights'],\n  ])\n\n  regl.frame(() => {\n    regl.clear({ color: [0.05, 0.05, 0.05, 1] })\n    const deltaTime = 0.017\n    statsWidget.update(deltaTime)\n\n    mainScope(() => {\n      camera(() => {\n        lightScope(() => {\n          bunnyDraw(bunnyProps)\n          planeDraw(planeProps)\n        })\n        lightDraw(lightProps)\n      })\n    })\n  })\n}\n\n// https://github.com/regl-project/regl/blob/gh-pages/example/shadow-volume.js\n// ----First pass: Normally draw mesh, no stencil buffer\nconst pass1 = {\n  // use depth-buffer as usual.\n  depth: { enable: true, mask: true, func: '<=' },\n  // no stencil test\n  stencil: { enable: false },\n  // turn on color write\n  colorMask: [true, true, true, true],\n  // cull back-faces as usual.\n  cull: { enable: true, face: 'back' },\n}\n\n// ---Second pass: Draw to stencil buffer\nconst pass2 = {\n  depth: {\n    mask: false, // don't write to depth buffer\n    enable: true, // but DO use the depth test!\n    func: '<',\n  },\n\n  // setup stencil buffer.\n  stencil: {\n    enable: true,\n    mask: 0xff,\n    func: {\n      // stencil test always passes.\n      // since we are only writing to the stencil buffer in this pass.\n      cmp: 'always',\n      ref: 0,\n      mask: 0xff,\n    },\n    // as can be seen, basically we are doing Carmack's reverse.\n    opBack: { fail: 'keep', zfail: 'increment wrap', zpass: 'keep' },\n    opFront: { fail: 'keep', zfail: 'decrement wrap', zpass: 'keep' },\n  },\n  // do no culling. This means that we can write to the stencil\n  // buffer in a single pass! So we handle both the backfaces and the frontfaces\n  // in this pass.\n  cull: { enable: false },\n\n  // don't write to color buffer.\n  colorMask: [false, false, false, false],\n}\n\n// ----Final pass: Draw mesh and overwrite the shadowed parts\nconst pass3 = {\n  depth: {\n    mask: false,\n    enable: true,\n    func: '<=',\n  },\n\n  // setup stencil buffer.\n  stencil: {\n    enable: true,\n    mask: 0xff,\n    // IF the stencil value at the fragment is not zero,\n    // then by Carmack's reverse, the fragment is in shadow!\n    func: {\n      cmp: '!=',\n      ref: 0,\n      mask: 0xff,\n    },\n    // do no writing to stencil buffer in this pass.\n    // we already did that in the previous pass.\n    op: {\n      fail: 'keep',\n      zfail: 'keep',\n      pass: 'keep',\n    },\n  },\n\n  // DO write to color buffer.\n  colorMask: [true, true, true, true],\n\n  cull: {\n    enable: true,\n    face: 'back',\n  },\n}\n"],
  "mappings": "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",
  "names": []
}
