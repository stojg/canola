{
  "version": 3,
  "sources": ["/Users/stojg/Sites/canola/src/index.ts"],
  "sourcesContent": ["import REGL, {Vec2, Vec3} from 'regl'\nimport { createCamera } from './lib/camera'\n\nimport bunny from 'bunny'\nimport plane from './models/plane'\nimport normals from 'angle-normals'\nimport {glMatrix, mat4, vec2, vec3} from 'gl-matrix'\nimport { FPSControls } from './lib/controls'\nimport {cube} from \"./models/cube\"\n\nconst regl = REGL({\n  attributes: {\n    antialias: true,\n  },\n})\n\n// look up resl - https://github.com/regl-project/resl\nconst controls = new FPSControls(regl._gl.canvas as HTMLCanvasElement)\nconst camera = createCamera(regl, controls, {\n  position: vec3.fromValues(0, 1.5, 10),\n})\n\nconst loadShaders = (fname: string, vname: string) => {\n  const f = fetch(`shaders/${fname}.fsh`).then((r) => r.text())\n  const v = fetch(`shaders/${vname}.vsh`).then((r) => r.text())\n  return Promise.all([f, v])\n}\n\nconst createModel = (position: vec3, scale: number, deg: number = 0, rotAxis: vec3 = [0,1,0]): REGL.Mat4 => {\n  const translation = mat4.identity(new Float32Array(16))\n  mat4.translate(translation, translation, position)\n  mat4.rotate(translation, translation, glMatrix.toRadian(deg), rotAxis)\n  mat4.scale(translation, translation, [scale, scale, scale])\n  return translation as REGL.Mat4\n}\n\nconst lights = [\n  {color: vec3.fromValues(100,100,100), pos: vec3.fromValues(-3,3,-3)},\n  {color: vec3.fromValues(100,0,0), pos: vec3.fromValues(3,3,3)},\n  {color: vec3.fromValues(0,100,0), pos: vec3.fromValues(-3,3,3)},\n  {color: vec3.fromValues(0,0,100), pos: vec3.fromValues(3,3,-3)}\n]\n\nconst bunnyProps = [\n  {\n    model: createModel(vec3.fromValues(0, 0, 0), 0.2, 45),\n    albedo: vec3.fromValues(0.55, 0.55, 0.60),\n    metallic: 0.25, // 0.0 - 1.0,\n    roughness: 1 - 0.18, // 0.025 - 1.0\n    ao: 1.0, // 0.0 - 1.0\n  },\n  {\n    model: createModel(vec3.fromValues(4, 0, 4), 0.2, -45),\n    albedo: vec3.fromValues(0.69, 0.27, 0.20),\n    metallic: 0.20, // 0.0 - 1.0,\n    roughness: 1 - 0.25, // 0.025 - 1.0\n    ao: 1.0, // 0.0 - 1.0\n  },\n  {\n    model: createModel(vec3.fromValues(-4, 0, 4), 0.2, 90),\n    albedo: vec3.fromValues(0.0, 0.5, 0.0),\n    metallic: 0, // 0.0 - 1.0,\n    roughness: 0.025, // 0.025 - 1.0\n    ao: 1.0, // 0.0 - 1.0\n  },\n  {\n    model: createModel(vec3.fromValues(-2, 0, 4), 0.2, 35),\n    albedo: vec3.fromValues(0.0, 0.5, 0.9),\n    metallic: 0.5, // 0.0 - 1.0,\n    roughness: 0.025, // 0.025 - 1.0\n    ao: 1.0, // 0.0 - 1.0\n  }\n]\n\nconst lightProps : any = []\nfor (const i in lights) {\n  lightProps.push({\n    model: createModel(lights[i].pos, 0.05),\n    albedo: lights[i].color,\n    metallic: 0, // 0.0 - 1.0,\n    roughness: 0.025, // 0.025 - 1.0\n    ao: 1.0, // 0.0 - 1.0\n  })\n}\n\nconst planeProps = [{\n  model: createModel(vec3.fromValues(0, 0, 0), 20, 90, [1,0,0]),\n  albedo: [0.42, 0.40, 0.38],\n  metallic: 0.69,\n  roughness: 0.08,\n  ao: 0.00,\n}]\n\ninterface MeshUniforms {\n  model: REGL.Mat4\n  albedo: REGL.Vec3\n  metallic: number,\n  roughness: number,\n  ao: number,\n  'lights[0].color': vec3\n  'lights[0].position': vec3\n  'lights[1].color': vec3\n  'lights[1].position': vec3\n  'lights[2].color': vec3\n  'lights[2].position': vec3\n  'lights[3].color': vec3\n  'lights[3].position': vec3\n}\n\ninterface MeshAttributes {\n  position: vec3[]\n  normal: vec3[]\n  // uv: vec2[]\n}\n\nconst planeDraw = loadShaders('pbr', 'pbr').then(([f, v]) => {\n  return regl<MeshUniforms, MeshAttributes>({\n    frag: f, vert: v,\n    elements: plane.indices,\n    attributes: { position: plane.positions, normal: plane.normals },\n    uniforms: {\n      model: regl.prop<MeshUniforms, 'model'>('model'),\n      albedo: regl.prop<MeshUniforms, 'albedo'>('albedo'),\n      metallic: regl.prop<MeshUniforms, 'metallic'>('metallic'),\n      roughness: regl.prop<MeshUniforms, 'roughness'>('roughness'),\n      ao: regl.prop<MeshUniforms, 'ao'>('ao'),\n      'lights[0].color': lights[0].color,\n      'lights[0].position': lights[0].pos,\n      'lights[1].color': lights[1].color,\n      'lights[1].position': lights[1].pos,\n      'lights[2].color': lights[2].color,\n      'lights[2].position': lights[2].pos,\n      'lights[3].color': lights[3].color,\n      'lights[3].position': lights[3].pos,\n    },\n  })\n})\n\n\nconst bunnyDraw = loadShaders('pbr', 'pbr').then(([f, v]) => {\n  return regl<MeshUniforms, MeshAttributes>({\n    frag: f, vert: v,\n    elements: bunny.cells,\n    attributes: { position: bunny.positions, normal: normals(bunny.cells, bunny.positions) },\n    uniforms: {\n      model: regl.prop<MeshUniforms, 'model'>('model'),\n      albedo: regl.prop<MeshUniforms, 'albedo'>('albedo'),\n      metallic: regl.prop<MeshUniforms, 'metallic'>('metallic'),\n      roughness: regl.prop<MeshUniforms, 'roughness'>('roughness'),\n      ao: regl.prop<MeshUniforms, 'ao'>('ao'),\n      'lights[0].color': lights[0].color,\n      'lights[0].position': lights[0].pos,\n      'lights[1].color': lights[1].color,\n      'lights[1].position': lights[1].pos,\n      'lights[2].color': lights[2].color,\n      'lights[2].position': lights[2].pos,\n      'lights[3].color': lights[3].color,\n      'lights[3].position': lights[3].pos,\n    },\n  })\n})\n\nconst lightDraw = loadShaders('pbr', 'pbr').then(([f, v]) => {\n  return regl<MeshUniforms, MeshAttributes>({\n    frag: f, vert: v,\n    elements: cube.indices,\n    attributes: { position: cube.positions, normal: cube.normals },\n    uniforms: {\n      model: regl.prop<MeshUniforms, 'model'>('model'),\n      albedo: regl.prop<MeshUniforms, 'albedo'>('albedo'),\n      metallic: regl.prop<MeshUniforms, 'metallic'>('metallic'),\n      roughness: regl.prop<MeshUniforms, 'roughness'>('roughness'),\n      ao: regl.prop<MeshUniforms, 'ao'>('ao'),\n      'lights[0].color': lights[0].color,\n      'lights[0].position': lights[0].pos,\n      'lights[1].color': lights[1].color,\n      'lights[1].position': lights[1].pos,\n      'lights[2].color': lights[2].color,\n      'lights[2].position': lights[2].pos,\n      'lights[3].color': lights[3].color,\n      'lights[3].position': lights[3].pos,\n    },\n  })\n})\n\n\nPromise.all([planeDraw, bunnyDraw, lightDraw]).then((p) => {\n  regl.frame(() => {\n    regl.clear({ color: [0.05, 0.05, 0.05, 1] })\n    camera(() => {\n      p[0](planeProps)\n      p[1](bunnyProps)\n      p[2](lightProps)\n    })\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
